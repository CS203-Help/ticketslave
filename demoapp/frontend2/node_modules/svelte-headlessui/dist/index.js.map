{"version":3,"sources":["../src/lib/combobox.ts","../src/lib/internal/aria-activedescendent.ts","../src/lib/internal/aria-attribute.ts","../src/lib/internal/aria-controls.ts","../src/lib/internal/aria-disabled.ts","../src/lib/internal/aria-expanded.ts","../src/lib/internal/focus.ts","../src/lib/internal/keys.ts","../src/lib/internal/aria-label.ts","../src/lib/internal/aria-selected.ts","../src/lib/internal/behavior.ts","../src/lib/internal/key-handler.ts","../src/lib/internal/key-escape.ts","../src/lib/internal/key-tab.ts","../src/lib/internal/list.ts","../src/lib/internal/new-id.ts","../src/lib/internal/events.ts","../src/lib/internal/on-click.ts","../src/lib/internal/on-click-outside.ts","../src/lib/internal/on-input.ts","../src/lib/internal/on-keydown.ts","../src/lib/internal/on-pointer-move.ts","../src/lib/internal/noop.ts","../src/lib/internal/set-has-popup.ts","../src/lib/internal/set-role.ts","../src/lib/internal/set-tab-index.ts","../src/lib/internal/set-type.ts","../src/lib/internal/value.ts","../src/lib/internal/utils.ts","../src/lib/internal/key-enter.ts","../src/lib/internal/key-home-end.ts","../src/lib/internal/key-left-right.ts","../src/lib/internal/key-up-down.ts","../src/lib/internal/key-navigation.ts","../src/lib/dialog.ts","../src/lib/internal/aria-modal.ts","../src/lib/disclosure.ts","../src/lib/internal/key-space-enter.ts","../src/lib/listbox.ts","../src/lib/internal/is-character.ts","../src/lib/internal/key-character.ts","../src/lib/menu.ts","../src/lib/popover.ts","../src/lib/tabs.ts","../src/lib/internal/aria-orientation.ts","../src/lib/switch.ts","../src/lib/internal/aria-checked.ts","../src/lib/internal/aria-pressed.ts"],"sourcesContent":["import { derived, writable } from \"svelte/store\";\nimport { reflectAriaActivedescendent } from \"./internal/aria-activedescendent\";\nimport { reflectAriaControls, type Controllable } from './internal/aria-controls';\nimport { reflectAriaDisabled } from \"./internal/aria-disabled\";\nimport { defaultExpanded, reflectAriaExpanded, type Expandable, focusOnClose } from \"./internal/aria-expanded\";\nimport { reflectAriaLabel, type Labelable } from \"./internal/aria-label\";\nimport { defaultSelected, type Selectable } from \"./internal/aria-selected\";\nimport { applyBehaviors } from \"./internal/behavior\";\nimport { keyEscape } from \"./internal/key-escape\";\nimport { keyTabAllow } from \"./internal/key-tab\";\nimport { activate, active, defaultList, firstActive, getFocuser, getUpdater, lastActive, nextActive, onDestroy, onSelect, previousActive, removeItem, type ItemOptions, type List } from \"./internal/list\";\nimport { ensureID } from \"./internal/new-id\";\nimport { onClick } from \"./internal/on-click\";\nimport { onClickOutside } from \"./internal/on-click-outside\";\nimport { onInput } from \"./internal/on-input\";\nimport { onKeydown } from \"./internal/on-keydown\";\nimport { onPointerMoveChild, onPointerOut } from \"./internal/on-pointer-move\";\nimport { setHasPopup } from \"./internal/set-has-popup\";\nimport { setRole } from \"./internal/set-role\";\nimport { setTabIndex } from \"./internal/set-tab-index\";\nimport { setType } from \"./internal/set-type\";\nimport { reflectSelectedValueOnClose } from \"./internal/value\";\nimport { tick } from \"svelte\";\nimport { getPrefix } from \"./internal/utils\";\nimport { keyEnter } from \"./internal/key-enter\";\nimport { keyNavigation } from \"./internal/key-navigation\";\n\n// TODO: add \"value\" selector, to pick text value off list item objects\nexport interface Combobox extends Labelable, Expandable, Controllable, List, Selectable {\n  input?: HTMLElement\n  button?: HTMLElement\n  filter: string\n  moved: boolean  // whether we have moved active or not (to reset when filtering)\n}\n\nexport function createCombobox(init?: Partial<Combobox>) {\n  // prefix for generating unique IDs\n  const prefix = getPrefix('combobox')\n\n  // internal state for component\n  let state: Combobox = {\n    ...defaultList(),\n    ...defaultExpanded,\n    ...defaultSelected,\n    ...init,\n    filter: '',\n    moved: false,\n  }\n\n  // wrap with store for reactivity\n  const store = writable(state)\n\n  // update state and notify store of changes for reactivity\n  const set = (part: Partial<Combobox>) => store.set(state = { ...state, ...part })\n\n  // open the menu and set first item active\n  const open = () => set({ expanded: true, opened: true, active: state.items.findIndex(x => x.value === state.selected) })\n\n  // close the menu\n  const close = () => set({ expanded: false, active: -1 })\n\n  // toggle open / closed state\n  const toggle = () => state.expanded ? close() : open()\n\n  // set focused (active) item only if changed\n  const focus = (active: number, expand = false) => {\n    state.active !== active && set({ expanded: state.expanded || expand, active })\n  }\n\n  // set focus (active) to first\n  const first = () => focus(firstActive(state), true)\n\n  // set focus (active) to selected or previous\n  const previous = () => focus(state.active === -1\n    ? state.items.findIndex(x => x.value === state.selected)\n    : previousActive(state), true)\n\n  // set focus (active) to selected or next\n  const next = () => focus(state.active === -1\n    ? state.items.findIndex(x => x.value === state.selected)\n    : nextActive(state), true)\n\n  // set focus (active) to last\n  const last = () => focus(lastActive(state), true)\n\n  // clear focus\n  const none = () => focus(-1)\n\n  const reset = () => {\n    set({ filter: '', expanded: false })\n  }\n\n  const filter = async (value: string) => {\n    // current active item\n    const current = state.active === -1\n      ? state.selected\n      : state.items[state.active].value\n\n    set({ filter: value, expanded: true, opened: true })  // keep expanded or expand if filter is set\n\n    await tick()\n\n    // if we moved try to keep current active, otherwise use selected, always fallback to first\n    // unless there are no items matching the filter in which case nothing can be active\n    const selectedIndex = state.items.findIndex(item => item.value === state.selected)\n    const currentIndex = state.items.findIndex(item => item.value === current)\n    const active = state.items.length\n      ? state.moved\n        ? currentIndex === -1\n          ? 0\n          : currentIndex\n        : selectedIndex === -1\n          ? currentIndex === -1\n            ? 0\n            : currentIndex\n          : selectedIndex\n      : -1\n\n    if (state.active !== active) {\n      set({ active })\n    }\n  }\n\n  // set the focus based on the HTMLElement passed which will be a menuitem element or null\n  const focusNode = getFocuser(() => state, focus)\n\n  const remove = (node: HTMLElement) => set(removeItem(state, node))\n\n  const select = () => set(onSelect(state, state.input))\n\n  function input(node: HTMLElement) {\n    ensureID(node, prefix)\n    set({ input: node })\n\n    const destroy = applyBehaviors(node, [\n      setType('text'),\n      setRole('combobox'),\n      setTabIndex(0),\n      reflectAriaLabel(store),\n      reflectAriaExpanded(store),\n      reflectAriaControls(store),\n      reflectSelectedValueOnClose(store, item => item?.name),\n      onKeydown(\n        keyEnter(select, toggle),\n        keyEscape(close),\n        keyNavigation(first, previous, next, last),\n        keyTabAllow(select, close),\n      ),\n      onInput(filter),\n      focusOnClose(store),\n    ])\n\n    return {\n      destroy,\n    }\n  }\n\n  // menubutton\n  function button(node: HTMLElement) {\n    ensureID(node, prefix)\n    set({ button: node })\n\n    const destroy = applyBehaviors(node, [\n      setType('button'),\n      setRole('button'),\n      setHasPopup(),\n      setTabIndex(-1),\n      reflectAriaExpanded(store),\n      reflectAriaControls(store),\n      onClick(toggle),\n      node => {\n        const setFocusToInput = () => state.input?.focus()\n        node.addEventListener('focus', setFocusToInput)\n        return () => node.removeEventListener('focus', setFocusToInput)\n      }\n    ])\n\n    return {\n      destroy,\n    }\n  }\n\n  function items(node: HTMLElement) {\n    ensureID(node, prefix)\n    set({ controls: node.id })\n\n    const destroy = applyBehaviors(node, [\n      setRole('listbox'),\n      setTabIndex(-1),\n      onClickOutside(close, target => state.button?.contains(target)),\n      onClick(activate('[role=\"option\"]', focusNode, select, close)),\n      onPointerMoveChild('[role=\"option\"]', focusNode),\n      onPointerOut(none),\n      reflectAriaActivedescendent(store),\n    ])\n\n    return {\n      destroy,\n    }\n  }\n\n  // TODO: allow \"any\" type of value, as long as a text extractor is supplied (default function is treat as a string)\n  // NOTE: text value is required for searchability\n  function item(node: HTMLElement, options?: ItemOptions) {\n    ensureID(node, prefix)\n\n    const update = getUpdater(node, () => state, set)\n\n    update(options)\n\n    const destroy = applyBehaviors(node, [\n      setTabIndex(-1),\n      setRole('option'),\n      reflectAriaDisabled(store),\n      onDestroy(remove),\n    ])\n\n    return {\n      update,\n      destroy,\n    }\n  }\n\n  // expose a subset of our state, derive the selected value\n  const { subscribe } = derived(store, $state => {\n    const { expanded, selected, filter } = $state\n    return { expanded, selected, filter, active: active($state) }\n  })\n\n  return {\n    subscribe,\n    input,\n    button,\n    items,\n    item,\n    reset,\n    open,\n    close,\n    set,\n  }\n}\n","import { derived, type Readable } from 'svelte/store'\nimport { setAriaAttributeString } from './aria-attribute'\nimport type { Behavior } from './behavior'\nimport type { List } from './list'\n\nexport const setAriaActivedescendent = setAriaAttributeString('aria-activedescendant')\n\nexport const reflectAriaActivedescendent = (store: Readable<List>): Behavior => node => derived(store, $store => $store.items[$store.active]?.id ?? '').subscribe(setAriaActivedescendent(node))\n","export const setAriaAttributeString = (name: string) => (node: HTMLElement) => (id?: string) => id\n  ? node.setAttribute(name, id)\n  : node.removeAttribute(name)\n\nexport const setAriaAttributeBoolean = (name: string) => (node: HTMLElement) => (value?: boolean) => value === undefined\n  ? node.removeAttribute(name)\n  : node.setAttribute(name, value.toString())","import type { Behavior } from \"./behavior\"\nimport { derived, type Readable } from 'svelte/store'\nimport { setAriaAttributeString } from \"./aria-attribute\"\n\nexport interface Controllable {\n  controls?: string\n}\n\nexport const setAriaControls = setAriaAttributeString('aria-controls')\n\nexport const reflectAriaControls = (store: Readable<Controllable>): Behavior => node => derived(store, $store => $store.controls).subscribe(setAriaControls(node))\n","import { derived, type Readable } from 'svelte/store'\nimport { setAriaAttributeBoolean } from './aria-attribute'\nimport type { Behavior } from './behavior'\nimport type { List } from './list'\n\nexport const setAriaDisabled = setAriaAttributeBoolean('aria-disabled')\n\nexport const reflectAriaDisabled = (store: Readable<List>): Behavior => node => derived(store, $store => $store.items.find(item => item.id === node.id)?.disabled).subscribe(setAriaDisabled(node))\n","import { derived, type Readable } from 'svelte/store'\nimport { setAriaAttributeBoolean } from './aria-attribute'\nimport { setFocus } from './focus'\nimport type { Behavior } from './behavior'\n\nexport interface Expandable {\n  expanded: boolean\n  opened: boolean // flag if it's ever been opened, to prevent initial focus being set when closed\n}\n\nexport const defaultExpanded: Expandable = {\n  expanded: false,\n  opened: false,\n}\n\nexport const setAriaExpanded = setAriaAttributeBoolean('aria-expanded')\n\nexport const reflectAriaExpanded = (store: Readable<Expandable>): Behavior => node => derived(store, $store => $store.expanded).subscribe(setAriaExpanded(node))\n\nexport const focusOnExpanded = (store: Readable<Expandable>): Behavior => node => derived(store, $store => $store.expanded).subscribe(setFocus(node))\n\nexport const focusOnClose = (store: Readable<Expandable>): Behavior => node => derived(store, $store => $store.opened && !$store.expanded).subscribe(setFocus(node))\n","import { derived, type Readable } from \"svelte/store\"\nimport { Tab } from \"./keys\"\nimport type { Expandable } from \"./aria-expanded\"\nimport type { Behavior } from \"./behavior\"\n\nexport const setFocus = (node: HTMLElement) => (focus: boolean) => {\n  if (focus) {\n    // may need to wait for svelte to update UI before we can set focus\n    requestAnimationFrame(() => {\n      node.focus({ preventScroll: true })\n    })\n  }\n}\n\n// Credit:\n//  - https://stackoverflow.com/a/30753870\nconst focusableSelector = [\n  '[contentEditable=true]',\n  '[tabindex]',\n  'a[href]',\n  'area[href]',\n  'button:not([disabled])',\n  'iframe',\n  'input:not([disabled])',\n  'select:not([disabled])',\n  'textarea:not([disabled])',\n]\n\nfunction onKeyDown(event: KeyboardEvent) {\n  if (event.key !== Tab) return\n\n  const container = event.currentTarget as HTMLElement\n  const element = event.target as HTMLElement\n  if (!container.contains(element)) return\n\n  const focusable = [...container.querySelectorAll(focusableSelector.join(','))]\n  const first = focusable[0]\n  const last = focusable[focusable.length - 1]\n\n  // shift + tab on first element should wrap back to last\n  if (element === first && event.shiftKey) {\n    (last as HTMLElement).focus()\n    event.preventDefault()\n  }\n\n  // plain tab on last element should wrap back to first\n  if (element === last && !event.shiftKey) {\n    (first as HTMLElement).focus()\n    event.preventDefault()\n  }\n}\n\nexport const trapFocusOnOpen = (store: Readable<Expandable>): Behavior => node => derived(store, $store => $store.expanded).subscribe(expanded => {\n  if (expanded) {\n    const focusable = node.querySelector(focusableSelector.join(','))\n    if (focusable) {\n      requestAnimationFrame(() => (focusable as HTMLElement).focus())\n    }\n    node.addEventListener('keydown', onKeyDown)\n  } else {\n    node.removeEventListener('keydown', onKeyDown)\n  }\n})\n","// Ref: https://www.w3.org/TR/uievents-key/#named-key-attribute-values\nexport const Space = ' '\nexport const Enter = 'Enter'\nexport const Esc = 'Esc'\nexport const Escape = 'Escape'\nexport const Backspace = 'Backspace'\n\nexport const ArrowLeft = 'ArrowLeft'\nexport const ArrowUp = 'ArrowUp'\nexport const ArrowRight = 'ArrowRight'\nexport const ArrowDown = 'ArrowDown'\n\nexport const Home = 'Home'\nexport const End = 'End'\nexport const Up = 'Up'\nexport const Down = 'Down'\n\nexport const PageUp = 'PageUp'\nexport const PageDown = 'PageDown'\n\nexport const Tab = 'Tab'\n","import type { Behavior } from \"./behavior\"\nimport { derived, type Readable } from 'svelte/store'\nimport { setAriaAttributeString } from \"./aria-attribute\"\n\nexport interface Labelable {\n  label?: string\n}\n\nexport const setAriaLabel = setAriaAttributeString('aria-label')\n\nexport const reflectAriaLabel = (store: Readable<Labelable>): Behavior => node => derived(store, $store => $store.label).subscribe(setAriaLabel(node))\n","import { derived, type Readable } from 'svelte/store'\nimport { setAriaAttributeBoolean } from './aria-attribute'\nimport type { Behavior } from './behavior'\n\n// TODO: enforce that it has to extend list (?)\nexport interface Selectable {\n  selected: any\n}\n\nexport const defaultSelected: Selectable = {\n  selected: null\n}\n\nexport const setAriaSelected = setAriaAttributeBoolean('aria-selected')\n\nexport const reflectAriaSelected = (store: Readable<Selectable>, value: any): Behavior => node => derived(store, $store => $store.selected === value).subscribe(setAriaSelected(node))\n","export type Unsubscribe = () => void\nexport type Behavior = (node: HTMLElement) => Unsubscribe\n\nexport function applyBehaviors(node: HTMLElement, behaviors: Behavior[]) {\n  const unsubscribes = behaviors.map(behavior => behavior(node))\n  return () => unsubscribes.forEach(unsubscribe => unsubscribe())\n}\n","import type { Callable } from \"./callable\"\n\nexport type KeyHandler = (event: KeyboardEvent) => void\n\nexport const blockDefaultKeyAction = (event: KeyboardEvent) => {\n  event.preventDefault()\n  event.stopPropagation()\n  event.stopImmediatePropagation()\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const allowDefaultKeyAction = (_event: KeyboardEvent) => { }\n\nexport const keyHandler = (matches: string[], action: KeyHandler = blockDefaultKeyAction) => (...fns: Callable[]): KeyHandler => event => {\n  if (matches.includes(event.key)) {\n    fns.forEach(fn => fn())\n    if (action) {\n      action(event)\n    }\n  }\n}","import { keyHandler } from \"./key-handler\"\nimport { Escape } from \"./keys\"\n\nexport const keyEscape = keyHandler([Escape])","import { allowDefaultKeyAction, keyHandler } from \"./key-handler\"\nimport { Tab } from \"./keys\"\n\nexport const keyTab = keyHandler([Tab])\n\nexport const keyTabAllow = keyHandler([Tab], allowDefaultKeyAction)","import type { Behavior } from \"./behavior\"\nimport type { Callable } from \"./callable\"\n\nexport interface ItemOptions {\n  value?: any\n  disabled?: boolean\n}\n\nexport interface ListItem {\n  id: string\n  text: string\n  value: any\n  disabled: boolean\n}\n\nexport interface List {\n  items: ListItem[]\n  active: number\n}\n\nexport const defaultList = () => ({\n  items: [],\n  active: -1,\n} as List)\n\n\nexport function onDestroy(fn: (node: HTMLElement) => void): Behavior {\n  return node => () => fn(node)\n}\n\nexport const removeItem = (state: List, node: HTMLElement) => {\n  return {\n    items: state.items.filter(item => item.id !== node.id)\n  }\n}\n\nexport const active = (state: List) => state.active === -1 || state.items.length === 0 ? undefined : state.active >= state.items.length ? state.items[state.active] : state.items[state.active].value\n\nexport const activate = (selector: string, focus: (node: HTMLElement | null) => void, ...actions: Callable[]) => (event: Event) => {\n  const el = (event.target as Element).closest(selector)\n  focus(el as HTMLElement)\n  actions.forEach(action => action())\n}\n\nexport function onSelect(state: List, node?: HTMLElement) {\n  if (state.active === -1 || state.items[state.active].disabled) return {}\n  const selected = active(state)\n  if (node) {\n    const event = new CustomEvent('select', {\n      detail: {\n        selected,\n      }\n    })\n    node.dispatchEvent(event)\n  }\n  return { selected }\n}\n\nexport function getItemValues(node: HTMLElement, options?: ItemOptions) {\n  const text = node.textContent?.trim() ?? ''\n  return {\n    text,\n    value: options?.value || text,\n    disabled: options?.disabled ?? false\n  }\n}\n\n// return index of first non-disabled item\nexport const firstActive = (state: List) => state.items.findIndex(item => !item.disabled)\n\n// return index of previous non-disabled item\nexport const previousActive = (state: List) => {\n  let x = state.active === -1 ? state.items.length : state.active\n  while (--x > -1) {\n    if (!state.items[x].disabled) {\n      return x\n    }\n  }\n  return state.active\n}\n\n// return index of next non-disabled item\nexport const nextActive = (state: List) => {\n  let x = state.active\n  while (++x < state.items.length) {\n    if (!state.items[x].disabled) {\n      return x\n    }\n  }\n  return state.active\n}\n\n// return index of next non-disabled item\nexport const lastActive = (state: List) => findLastIndex(state.items, item => !item.disabled)\n\n/**\n* Returns the index of the last element in the array where predicate is true, and -1\n* otherwise.\n* @param array The source array to search in\n* @param predicate find calls predicate once for each element of the array, in descending\n* order, until it finds one where predicate returns true. If such an element is found,\n* findLastIndex immediately returns that element index. Otherwise, findLastIndex returns -1.\n*/\nexport function findLastIndex<T>(array: T[], predicate: (value: T, index: number, obj: T[]) => boolean): number {\n  let l = array.length;\n  while (l--) {\n    if (predicate(array[l], l, array))\n      return l;\n  }\n  return -1;\n}\n\nexport const getUpdater = (node: HTMLElement, getState: () => List, setState: (part: Partial<List>) => void) => (options?: ItemOptions) => {\n  const state = getState()\n  const values = getItemValues(node, options)\n  const item = state.items.find(item => item.id === node.id)\n  if (item) {\n    if (item.text === values.text && item.value === values.value && item.disabled === values.disabled) return\n    Object.assign(item, values)\n  } else {\n    state.items.push({ id: node.id, ...values })\n  }\n  setState({ items: state.items })\n}\n\nexport const getFocuser = (getState: () => List, focus: (active: number) => void) => (node: HTMLElement | null) => {\n  const state = getState()\n  focus(node ? state.items.findIndex(item => item.id === node.id && !item.disabled) : -1)\n}\n\nexport const getSearch = (getState: () => List, focus: (active: number) => void, prefixOnly: boolean = false) => (query: string) => {\n  const state = getState()\n  const searchable = state.active === -1\n    ? state.items\n    : state.items\n      .slice(state.active + 1)\n      .concat(state.items.slice(0, state.active + 1))\n\n  const re = new RegExp(`${prefixOnly ? '^' : ''}${query}`, 'i')\n  const found = searchable.findIndex(x => x.text.match(re) && !x.disabled)\n\n  if (found > -1) {\n    const index = (found + state.active + 1) % state.items.length\n    focus(index)\n  }\n}\n","let id = 0\n\nexport function newID() {\n  return ++id\n}\n\nexport function ensureID(node: HTMLElement, prefix: string) {\n  if (!node.id) {\n    node.id = `${prefix}:${newID()}`\n  }\n  return node\n}\n","// listener is a utility to define event listeners\nexport const listener = <K extends keyof HTMLElementEventMap>(node: HTMLElement, type: K, handler: (event: HTMLElementEventMap[K]) => void, capture = false) => {\n  node.addEventListener(type, handler, capture)\n  return () => node.removeEventListener(type, handler, capture)\n}\n","import { listener } from \"./events\"\n\nexport const onClick = (fn: (event: Event) => void) => (node: HTMLElement) => listener(node, 'click', fn)\n","import type { Behavior } from \"./behavior\"\nimport { listener } from \"./events\"\n\nexport function onClickOutside(fn: (event: Event) => void, preventPropagation?: (target: Node) => boolean | undefined): Behavior {\n  return node => {\n    let initial: Node | null = null\n\n    function handler(event: Event) {\n      if ((event as PointerEvent).pointerType === '') return // ignore space as click\n      if (initial && !node.contains(initial)) {\n        if (node.clientWidth) {\n          if (preventPropagation) {\n            // prevent event propagation if clicked element is contained within specified elements\n            // this is to avoid clicking a menu button, which is outside the menu list, and having\n            // the menu close and then immediately re-open (one example)\n            if (event.target instanceof Node) {\n              if (preventPropagation(event.target)) {\n                event.stopImmediatePropagation()\n              }\n            }\n          }\n          event.preventDefault()\n          fn(event)\n        }\n      }\n      initial = null\n    }\n\n    function setInitial(event: PointerEvent) {\n      if (event.isPrimary) {\n        initial = event.target as Node\n      }\n    }\n\n    const listeners = [\n      listener(document.documentElement, 'pointerdown', setInitial, true),\n      listener(document.documentElement, 'click', handler, true),\n    ]\n\n    return () => listeners.forEach(listener => listener())\n  }\n}\n","import { listener } from \"./events\"\n\ntype FilterFn = (value: string) => void\n\n// TODO: ensure node is type HTMLInputElement when applied\nexport const onInput = (fn: FilterFn) => (node: HTMLElement) => listener(node, 'input', event => {\n  const el = event.target as HTMLInputElement\n  fn(el.value)\n})\n","import type { Behavior } from \"./behavior\"\nimport type { KeyHandler } from \"./key-handler\"\n\nexport function onKeydown(...handlers: KeyHandler[]): Behavior {\n  const handler = (event: KeyboardEvent) => {\n    for (const handler of handlers) {\n      handler(event)\n    }\n  }\n\n  return node => {\n    node.addEventListener('keydown', handler)\n    return () => node.removeEventListener('keydown', handler)\n  }\n}\n","import type { Behavior } from \"./behavior\"\n\nexport function onPointerMove(fn: (node: HTMLElement) => void): Behavior {\n  return node => {\n    const handler = () => fn(node)\n\n    node.addEventListener('pointermove', handler)\n    return () => node.removeEventListener('pointermove', handler)\n  }\n}\n\nexport function onPointerOut(fn: () => void): Behavior {\n  return node => {\n    const handler = () => fn()\n\n    node.addEventListener('pointerout', handler)\n    return () => node.removeEventListener('pointerout', handler)\n  }\n}\n\nexport function onPointerMoveChild(selector: string, fn: (node: HTMLElement | null) => void): Behavior {\n  return node => {\n    const handler = (event: PointerEvent) => {\n      if (event.target !== node) {\n        const el = (event.target as Element).closest(selector)\n        fn(el as HTMLElement)\n      }\n    }\n\n    node.addEventListener('pointermove', handler)\n    return () => node.removeEventListener('pointermove', handler)\n  }\n}\n","export const noop = () => { }","import type { Behavior } from \"./behavior\"\nimport { noop } from \"./noop\"\n\nexport const setHasPopup = (): Behavior => node => {\n  node.setAttribute('aria-haspopup', 'true')\n  return noop\n}\n","import type { Behavior } from \"./behavior\"\nimport { noop } from \"./noop\"\n\nexport const setRole = (role: string): Behavior => node => {\n  node.setAttribute('role', role)\n  return noop\n}\n","import type { Behavior } from \"./behavior\"\nimport { noop } from \"./noop\"\n\n// TODO: change based on disabled\nexport const setTabIndex = (index = -1): Behavior => node => {\n  node.tabIndex = index\n  return noop\n}\n","import type { Behavior } from \"./behavior\"\nimport { noop } from \"./noop\"\n\nexport const setType = (type: string): Behavior => node => {\n  node.setAttribute('type', type)\n  return noop\n}\n","import type { Behavior } from \"./behavior\"\nimport { derived, type Readable } from 'svelte/store'\nimport type { Selectable } from \"./aria-selected\"\nimport type { Expandable } from \"./aria-expanded\"\n\nexport const setInputValue = (node: HTMLInputElement) => (value?: string) => {\n  if (value) {\n    node.value = value\n  }\n}\n\nexport const reflectSelectedValueOnClose = (store: Readable<Selectable & Expandable>, selector: (value: any) => string): Behavior => node => derived(store, $store => $store.expanded ? null : $store.selected).subscribe(value => setInputValue(node as HTMLInputElement)(selector(value)))\n","export const getPrefix = (name: string) => 'headlessui-' + name\n","import { keyHandler } from \"./key-handler\"\nimport { Enter } from \"./keys\"\n\nexport const keyEnter = keyHandler([Enter])","import { keyHandler } from \"./key-handler\"\nimport { Home, PageUp, End, PageDown } from \"./keys\"\n\nexport const keyHomePageUp = keyHandler([Home, PageUp])\nexport const keyEndPageDn = keyHandler([End, PageDown])\n","import { keyHandler } from \"./key-handler\"\nimport { ArrowLeft, ArrowRight } from \"./keys\"\n\nexport const keyLeft = keyHandler([ArrowLeft])\nexport const keyRight = keyHandler([ArrowRight])\n","import { keyHandler } from \"./key-handler\"\nimport { ArrowUp, ArrowDown } from \"./keys\"\n\nexport const keyUp = keyHandler([ArrowUp])\nexport const keyDown = keyHandler([ArrowDown])\n","import type { Orientation } from \"./aria-orientation\"\nimport type { Callable } from \"./callable\"\nimport type { KeyHandler } from \"./key-handler\"\nimport { keyEndPageDn, keyHomePageUp } from \"./key-home-end\"\nimport { keyLeft, keyRight } from \"./key-left-right\"\nimport { keyDown, keyUp } from \"./key-up-down\"\n\nexport const keyNavigation = (first: Callable, previous: Callable, next: Callable, last: Callable, orientation: Orientation = 'vertical'): KeyHandler => {\n  const handleFirst = keyHomePageUp(first)\n  const handlePrevious = orientation === 'vertical' ? keyUp(previous) : keyLeft(previous)\n  const handleNext = orientation === 'vertical' ? keyDown(next) : keyRight(next)\n  const handleLast = keyEndPageDn(last)\n\n  return event => {\n    handleFirst(event)\n    handlePrevious(event)\n    handleNext(event)\n    handleLast(event)\n  }\n}","import { derived, writable } from \"svelte/store\";\nimport { defaultExpanded, type Expandable } from \"./internal/aria-expanded\";\nimport { reflectAriaModal } from \"./internal/aria-modal\";\nimport { reflectAriaLabel, type Labelable } from \"./internal/aria-label\";\nimport { applyBehaviors } from \"./internal/behavior\";\nimport { keyEscape } from \"./internal/key-escape\";\nimport { ensureID } from \"./internal/new-id\";\nimport { onClickOutside } from \"./internal/on-click-outside\";\nimport { onKeydown } from \"./internal/on-keydown\";\nimport { setRole } from \"./internal/set-role\";\nimport { getPrefix } from \"./internal/utils\";\nimport { trapFocusOnOpen } from \"./internal/focus\";\n\nexport interface Dialog extends Expandable, Labelable { }\n\nexport function createDialog(init?: Partial<Dialog>) {\n  // prefix for generating unique IDs\n  const prefix = getPrefix('dialog')\n\n  let state: Dialog = {\n    ...defaultExpanded,\n    ...init,\n  }\n\n  // wrap with store for reactivity\n  const store = writable(state)\n\n  // update state and notify store of changes for reactivity\n  const set = (part: Partial<Dialog>) => store.set(state = { ...state, ...part })\n\n  const open = () => set({ expanded: true, opened: true })\n  const close = () => set({ expanded: false })\n\n  // modal\n  function modal(node: HTMLElement) {\n    ensureID(node, prefix)\n\n    const destroy = applyBehaviors(node, [\n      setRole('dialog'),\n      reflectAriaModal(store),\n      reflectAriaLabel(store),\n      trapFocusOnOpen(store),\n      onClickOutside(close),\n      onKeydown(\n        keyEscape(close),\n      )\n    ])\n\n    return {\n      destroy,\n    }\n  }\n\n  // expose a subset of our state, derive the selected value\n  const { subscribe } = derived(store, $state => {\n    const { expanded } = $state\n    return { expanded }\n  })\n\n  return {\n    subscribe,\n    modal,\n    open,\n    close,\n    set,\n  }\n}\n","import { derived, type Readable } from 'svelte/store'\nimport { setAriaAttributeBoolean } from './aria-attribute'\nimport type { Behavior } from './behavior'\nimport type { Expandable } from './aria-expanded'\n\nexport const setAriaModal = setAriaAttributeBoolean('aria-modal')\n\nexport const reflectAriaModal = (store: Readable<Expandable>): Behavior => node => derived(store, $store => $store.expanded).subscribe(setAriaModal(node))\n","import { derived, writable } from \"svelte/store\";\nimport { reflectAriaControls, type Controllable } from \"./internal/aria-controls\";\nimport { defaultExpanded, focusOnClose, focusOnExpanded, reflectAriaExpanded, type Expandable } from \"./internal/aria-expanded\";\nimport { reflectAriaLabel, type Labelable } from \"./internal/aria-label\";\nimport { applyBehaviors } from \"./internal/behavior\";\nimport { keyEscape } from \"./internal/key-escape\";\nimport { keySpaceEnter } from \"./internal/key-space-enter\";\nimport { ensureID } from \"./internal/new-id\";\nimport { onClick } from \"./internal/on-click\";\nimport { onKeydown } from \"./internal/on-keydown\";\nimport { setHasPopup } from \"./internal/set-has-popup\";\nimport { setRole } from \"./internal/set-role\";\nimport { setTabIndex } from \"./internal/set-tab-index\";\nimport { setType } from \"./internal/set-type\";\nimport { getPrefix } from \"./internal/utils\";\n\nexport interface Disclosure extends Labelable, Expandable, Controllable {\n  button?: string\n  panel?: string\n}\n\nexport function createDisclosure(init?: Partial<Disclosure>) {\n  // prefix for generating unique IDs\n  const prefix = getPrefix('disclosure')\n\n  let state: Disclosure = {\n    ...defaultExpanded,\n    ...init,\n  }\n\n  // wrap with store for reactivity\n  const store = writable(state)\n\n  // update state and notify store of changes for reactivity\n  const set = (part: Partial<Disclosure>) => store.set(state = { ...state, ...part })\n\n  const open = () => set({ expanded: true, opened: true })\n  const close = () => set({ expanded: false })\n  const toggle = () => state.expanded ? close() : open()\n\n  // button\n  function button(node: HTMLElement) {\n    ensureID(node, prefix)\n    set({ button: node.id })\n\n    const destroy = applyBehaviors(node, [\n      setType('button'),\n      setRole('button'),\n      setHasPopup(),\n      setTabIndex(0),\n      reflectAriaExpanded(store),\n      reflectAriaLabel(store),\n      reflectAriaControls(store),\n      onClick(toggle),\n      onKeydown(\n        keyEscape(close),\n        keySpaceEnter(toggle),\n      ),\n      focusOnClose(store),\n    ])\n\n    return {\n      destroy,\n    }\n  }\n\n  // panel\n  function panel(node: HTMLElement) {\n    ensureID(node, prefix)\n    set({ panel: node.id, controls: node.id })\n\n    const destroy = applyBehaviors(node, [\n      focusOnExpanded(store),\n    ])\n\n    return {\n      destroy,\n    }\n  }\n\n  // expose a subset of our state, derive the selected value\n  const { subscribe } = derived(store, $state => {\n    const { expanded } = $state\n    return { expanded }\n  })\n\n  return {\n    subscribe,\n    button,\n    panel,\n    open,\n    close,\n    set,\n  }\n}\n","import { keyHandler } from \"./key-handler\"\nimport { Space, Enter } from \"./keys\"\n\nexport const keySpaceEnter = keyHandler([Space, Enter])\n","import { derived, writable } from \"svelte/store\";\nimport { reflectAriaActivedescendent } from \"./internal/aria-activedescendent\";\nimport { reflectAriaControls, type Controllable } from './internal/aria-controls';\nimport { reflectAriaDisabled } from \"./internal/aria-disabled\";\nimport { defaultExpanded, focusOnClose, focusOnExpanded, reflectAriaExpanded, type Expandable } from \"./internal/aria-expanded\";\nimport { reflectAriaLabel, type Labelable } from \"./internal/aria-label\";\nimport { defaultSelected, type Selectable } from \"./internal/aria-selected\";\nimport { applyBehaviors } from \"./internal/behavior\";\nimport { keyCharacter } from \"./internal/key-character\";\nimport { keyEscape } from \"./internal/key-escape\";\nimport { keySpaceEnter } from \"./internal/key-space-enter\";\nimport { keyTab } from \"./internal/key-tab\";\nimport { activate, active, defaultList, firstActive, getFocuser, getSearch, getUpdater, lastActive, nextActive, onDestroy, onSelect, previousActive, removeItem, type ItemOptions, type List } from \"./internal/list\";\nimport { ensureID } from \"./internal/new-id\";\nimport { noop } from \"./internal/noop\";\nimport { onClick } from \"./internal/on-click\";\nimport { onClickOutside } from \"./internal/on-click-outside\";\nimport { onKeydown } from \"./internal/on-keydown\";\nimport { onPointerMoveChild, onPointerOut } from \"./internal/on-pointer-move\";\nimport { setHasPopup } from \"./internal/set-has-popup\";\nimport { setRole } from \"./internal/set-role\";\nimport { setTabIndex } from \"./internal/set-tab-index\";\nimport { setType } from \"./internal/set-type\";\nimport { getPrefix } from \"./internal/utils\";\nimport { keyDown, keyUp } from \"./internal/key-up-down\";\nimport { keyNavigation } from \"./internal/key-navigation\";\n\n// TODO: add \"value\" selector, to pick text value off list item objects\nexport interface Listbox extends Labelable, Expandable, Controllable, List, Selectable {\n  button?: HTMLElement\n}\n\nexport function createListbox(init?: Partial<Listbox>) {\n  // prefix for generating unique IDs\n  const prefix = getPrefix('listbox')\n\n  // internal state for component\n  let state: Listbox = {\n    ...defaultList(),\n    ...defaultExpanded,\n    ...defaultSelected,\n    ...init,\n  }\n\n  // wrap with store for reactivity\n  const store = writable(state)\n\n  // update state and notify store of changes for reactivity\n  const set = (part: Partial<Listbox>) => store.set(state = { ...state, ...part })\n\n  // open the menu and set first item active\n  const open = () => set({ expanded: true, opened: true, active: state.items.findIndex(x => x.value === state.selected) })\n\n  // close the menu\n  const close = () => set({ expanded: false })\n\n  // toggle open / closed state\n  const toggle = () => state.expanded ? close() : open()\n\n  // set focused (active) item only if changed\n  const focus = (active: number) => state.active !== active && set({ active })\n\n  // set focus (active) to first\n  const first = () => focus(firstActive(state))\n\n  // set focus (active) to previous\n  const previous = () => focus(previousActive(state))\n\n  // set focus (active) to next\n  const next = () => focus(nextActive(state))\n\n  // set focus (active) to last\n  const last = () => focus(lastActive(state))\n\n  // clear focus\n  const none = () => focus(-1)\n\n  const search = getSearch(() => state, focus)\n\n  // set the focus based on the HTMLElement passed which will be a menuitem element or null\n  const focusNode = getFocuser(() => state, focus)\n\n  const remove = (node: HTMLElement) => set(removeItem(state, node))\n\n  const select = () => set(onSelect(state, state.button))\n\n  // menubutton\n  function button(node: HTMLElement) {\n    ensureID(node, prefix)\n    set({ button: node })\n\n    const destroy = applyBehaviors(node, [\n      setType('button'),\n      setRole('button'),\n      setHasPopup(),\n      setTabIndex(0),\n      reflectAriaLabel(store),\n      reflectAriaExpanded(store),\n      reflectAriaControls(store),\n      onClick(toggle),\n      onKeydown(\n        keySpaceEnter(toggle),\n        keyUp(toggle),\n        keyDown(toggle),\n      ),\n      focusOnClose(store),\n    ])\n\n    return {\n      destroy,\n    }\n  }\n\n  function items(node: HTMLElement) {\n    ensureID(node, prefix)\n    set({ controls: node.id })\n\n    const destroy = applyBehaviors(node, [\n      setRole('listbox'),\n      setTabIndex(0),\n      onClickOutside(close, target => state.button?.contains(target)),\n      onClick(activate('[role=\"option\"]', focusNode, select, close)),\n      onPointerMoveChild('[role=\"option\"]', focusNode),\n      onPointerOut(none),\n      onKeydown(\n        keySpaceEnter(select, close),\n        keyEscape(close),\n        keyNavigation(first, previous, next, last),\n        keyTab(noop),\n        keyCharacter(search),\n      ),\n      focusOnExpanded(store),\n      reflectAriaActivedescendent(store),\n    ])\n\n    return {\n      destroy,\n    }\n  }\n\n  // TODO: allow \"any\" type of value, as long as a text extractor is supplied (default function is treat as a string)\n  // NOTE: text value is required for searchability\n  function item(node: HTMLElement, options?: ItemOptions) {\n    ensureID(node, prefix)\n\n    const update = getUpdater(node, () => state, set)\n\n    update(options)\n\n    const destroy = applyBehaviors(node, [\n      setTabIndex(-1),\n      setRole('option'),\n      reflectAriaDisabled(store),\n      onDestroy(remove),\n    ])\n\n    return {\n      update,\n      destroy,\n    }\n  }\n\n  // expose a subset of our state, derive the selected value\n  const { subscribe } = derived(store, $state => {\n    const { expanded, selected } = $state\n    return { expanded, selected, active: active($state) }\n  })\n\n  return {\n    subscribe,\n    button,\n    items,\n    item,\n    open,\n    close,\n    set,\n  }\n}\n","// is single, printable character\nexport const isCharacter = (value: string) => /^\\S$/.test(value)\n","import type { Writable } from \"svelte/store\"\nimport { isCharacter } from \"./is-character\"\nimport type { KeyHandler } from \"./key-handler\"\nimport type { List } from \"./list\"\n\nexport interface Searchable extends List {\n  query: string\n}\n\ntype SearchFn = (query: string) => void\n\nexport const keyCharacter = (fn: SearchFn): KeyHandler => {\n  let timeout: number\n  let query = ''\n\n  return event => {\n    const { key } = event\n    if (isCharacter(key)) {\n      if (timeout) {\n        clearTimeout(timeout)\n      }\n\n      query += key\n      fn(query)\n\n      timeout = window.setTimeout(() => {\n        timeout = 0\n        query = ''\n      }, 350)\n    }\n  }\n}\n\nexport function searchItems(store: Writable<Searchable>): SearchFn {\n  return (query: string) => store.update(state => ({ ...state, query }))\n}","import { derived, writable } from \"svelte/store\";\nimport { reflectAriaActivedescendent } from \"./internal/aria-activedescendent\";\nimport { reflectAriaControls, type Controllable } from './internal/aria-controls';\nimport { reflectAriaDisabled } from \"./internal/aria-disabled\";\nimport { defaultExpanded, focusOnClose, focusOnExpanded, reflectAriaExpanded, type Expandable } from \"./internal/aria-expanded\";\nimport { reflectAriaLabel, type Labelable } from \"./internal/aria-label\";\nimport { defaultSelected, type Selectable } from \"./internal/aria-selected\";\nimport { applyBehaviors } from \"./internal/behavior\";\nimport { keyCharacter } from \"./internal/key-character\";\nimport { keyEscape } from \"./internal/key-escape\";\nimport { keySpaceEnter } from \"./internal/key-space-enter\";\nimport { keyTab } from \"./internal/key-tab\";\nimport { activate, active, defaultList, firstActive, getFocuser, getSearch, getUpdater, lastActive, nextActive, onDestroy, onSelect, previousActive, removeItem, type ItemOptions, type List } from \"./internal/list\";\nimport { ensureID } from \"./internal/new-id\";\nimport { noop } from \"./internal/noop\";\nimport { onClick } from \"./internal/on-click\";\nimport { onClickOutside } from \"./internal/on-click-outside\";\nimport { onKeydown } from \"./internal/on-keydown\";\nimport { onPointerMoveChild, onPointerOut } from \"./internal/on-pointer-move\";\nimport { setHasPopup } from \"./internal/set-has-popup\";\nimport { setRole } from \"./internal/set-role\";\nimport { setTabIndex } from \"./internal/set-tab-index\";\nimport { setType } from \"./internal/set-type\";\nimport { getPrefix } from \"./internal/utils\";\nimport { keyDown, keyUp } from \"./internal/key-up-down\";\nimport { keyNavigation } from \"./internal/key-navigation\";\n\n// TODO: add \"value\" selector, to pick text value off list item objects\nexport interface Menu extends Labelable, Expandable, Controllable, List, Selectable {\n  button?: HTMLElement\n}\n\nexport function createMenu(init?: Partial<Menu>) {\n  // prefix for generating unique IDs\n  const prefix = getPrefix('menu')\n\n  // internal state for component\n  let state: Menu = {\n    ...defaultList(),\n    ...defaultExpanded,\n    ...defaultSelected,\n    ...init,\n  }\n\n  // wrap with store for reactivity\n  const store = writable(state)\n\n  // update state and notify store of changes for reactivity\n  const set = (part: Partial<Menu>) => store.set(state = { ...state, ...part })\n\n  // open the menu and set first item active\n  const open = () => set({ expanded: true, opened: true })\n\n  // close the menu\n  const close = () => set({ expanded: false, active: -1 })\n\n  // toggle open / closed state\n  const toggle = () => state.expanded ? close() : open()\n\n  // set focused (active) item (open if not expanded) only if changed\n  const focus = (active: number, expand = false) => state.active !== active && set({ expanded: state.expanded || expand, active })\n\n  // set focus (active) to first\n  const first = () => focus(firstActive(state), true)\n\n  // set focus (active) to previous\n  const previous = () => focus(previousActive(state), true)\n\n  // set focus (active) to next\n  const next = () => focus(nextActive(state), true)\n\n  // set focus (active) to last\n  const last = () => focus(lastActive(state), true)\n\n  const select = () => set(onSelect(state, state.button))\n\n  // clear focus\n  const none = () => focus(-1)\n\n  const search = getSearch(() => state, focus, true)\n\n  // set the focus based on the HTMLElement passed which will be a menuitem element or null\n  const focusNode = getFocuser(() => state, focus)\n\n  const remove = (node: HTMLElement) => set(removeItem(state, node))\n\n  // menubutton\n  function button(node: HTMLElement) {\n    ensureID(node, prefix)\n    set({ button: node })\n\n    const destroy = applyBehaviors(node, [\n      setType('button'),\n      setRole('button'),\n      setHasPopup(),\n      setTabIndex(0),\n      reflectAriaLabel(store),\n      reflectAriaExpanded(store),\n      reflectAriaControls(store),\n      onClick(toggle),\n      onKeydown(\n        keySpaceEnter(toggle),\n        keyUp(last),\n        keyDown(first),\n      ),\n      focusOnClose(store),\n    ])\n\n    return {\n      destroy,\n    }\n  }\n\n  function items(node: HTMLElement) {\n    ensureID(node, prefix)\n    set({ controls: node.id })\n\n    const destroy = applyBehaviors(node, [\n      setRole('menu'),\n      setTabIndex(0),\n      onClickOutside(close, target => state.button?.contains(target)),\n      onClick(activate('[role=\"menuitem\"]', focusNode, select, close)),\n      onPointerMoveChild('[role=\"menuitem\"]', focusNode),\n      onPointerOut(none),\n      onKeydown(\n        keySpaceEnter(select, close),\n        keyEscape(close),\n        keyNavigation(first, previous, next, last),\n        keyTab(noop),\n        keyCharacter(search),\n      ),\n      focusOnExpanded(store),\n      reflectAriaActivedescendent(store),\n    ])\n\n    return {\n      destroy,\n    }\n  }\n\n  // TODO: allow \"any\" type of value, as long as a text extractor is supplied (default function is treat as a string)\n  // NOTE: text value is required for searchability\n  function item(node: HTMLElement, options?: ItemOptions) {\n    ensureID(node, prefix)\n\n    const update = getUpdater(node, () => state, set)\n\n    update(options)\n\n    const destroy = applyBehaviors(node, [\n      setTabIndex(-1),\n      setRole('menuitem'),\n      reflectAriaDisabled(store),\n      onDestroy(remove),\n    ])\n\n    return {\n      update,\n      destroy,\n    }\n  }\n\n  // expose a subset of our state, derive the selected value\n  const { subscribe } = derived(store, $state => {\n    const { expanded } = $state\n    return { expanded, active: active($state) }\n  })\n\n  return {\n    subscribe,\n    button,\n    items,\n    item,\n    open,\n    close,\n    set,\n  }\n}\n","import { derived, writable } from \"svelte/store\";\nimport { reflectAriaControls, type Controllable } from \"./internal/aria-controls\";\nimport { defaultExpanded, focusOnClose, focusOnExpanded, reflectAriaExpanded, type Expandable } from \"./internal/aria-expanded\";\nimport { reflectAriaLabel, type Labelable } from \"./internal/aria-label\";\nimport { applyBehaviors } from \"./internal/behavior\";\nimport { keyEscape } from \"./internal/key-escape\";\nimport { keySpaceEnter } from \"./internal/key-space-enter\";\nimport { ensureID } from \"./internal/new-id\";\nimport { onClick } from \"./internal/on-click\";\nimport { onClickOutside } from \"./internal/on-click-outside\";\nimport { onKeydown } from \"./internal/on-keydown\";\nimport { setHasPopup } from \"./internal/set-has-popup\";\nimport { setRole } from \"./internal/set-role\";\nimport { setTabIndex } from \"./internal/set-tab-index\";\nimport { setType } from \"./internal/set-type\";\nimport { getPrefix } from \"./internal/utils\";\n\nexport interface Popover extends Labelable, Expandable, Controllable {\n  button?: HTMLElement\n  panel?: string\n}\n\nexport function createPopover(init?: Partial<Popover>) {\n  // prefix for generating unique IDs\n  const prefix = getPrefix('popover')\n\n  let state: Popover = {\n    ...defaultExpanded,\n    ...init,\n  }\n\n  // wrap with store for reactivity\n  const store = writable(state)\n\n  // update state and notify store of changes for reactivity\n  const set = (part: Partial<Popover>) => store.set(state = { ...state, ...part })\n\n  const open = () => set({ expanded: true, opened: true })\n  const close = () => set({ expanded: false })\n  const toggle = () => state.expanded ? close() : open()\n\n  // button\n  function button(node: HTMLElement) {\n    ensureID(node, prefix)\n    set({ button: node })\n\n    const destroy = applyBehaviors(node, [\n      setType('button'),\n      setRole('button'),\n      setHasPopup(),\n      setTabIndex(0),\n      reflectAriaExpanded(store),\n      reflectAriaLabel(store),\n      reflectAriaControls(store),\n      onClick(toggle),\n      onKeydown(\n        keyEscape(close),\n        keySpaceEnter(toggle),\n      ),\n      focusOnClose(store),\n    ])\n\n    return {\n      destroy,\n    }\n  }\n\n  // panel\n  function panel(node: HTMLElement) {\n    ensureID(node, prefix)\n    set({ panel: node.id, controls: node.id })\n\n    const destroy = applyBehaviors(node, [\n      setRole('menu'),\n      onClickOutside(close, target => state.button?.contains(target)),\n      focusOnExpanded(store),\n    ])\n\n    return {\n      destroy,\n    }\n  }\n\n  // expose a subset of our state, derive the selected value\n  const { subscribe } = derived(store, $state => {\n    const { expanded } = $state\n    return { expanded }\n  })\n\n  return {\n    subscribe,\n    button,\n    panel,\n    open,\n    close,\n    set,\n  }\n}\n","import { derived, writable, type Readable } from \"svelte/store\";\nimport { reflectAriaActivedescendent } from \"./internal/aria-activedescendent\";\nimport { setAriaControls } from './internal/aria-controls';\nimport { reflectAriaLabel, type Labelable } from \"./internal/aria-label\";\nimport { defaultSelected, reflectAriaSelected, type Selectable } from \"./internal/aria-selected\";\nimport { applyBehaviors, type Behavior } from \"./internal/behavior\";\nimport { keySpaceEnter } from \"./internal/key-space-enter\";\nimport { activate, active, defaultList, firstActive, getFocuser, lastActive, nextActive, onDestroy, onSelect, previousActive, removeItem, type List, getUpdater, type ItemOptions } from \"./internal/list\";\nimport { ensureID } from \"./internal/new-id\";\nimport { onClick } from \"./internal/on-click\";\nimport { onKeydown } from \"./internal/on-keydown\";\nimport { setRole } from \"./internal/set-role\";\nimport { setTabIndex } from \"./internal/set-tab-index\";\nimport { setType } from \"./internal/set-type\";\nimport { getPrefix } from \"./internal/utils\";\nimport { keyNavigation } from \"./internal/key-navigation\";\nimport { defaultOrientation, reflectAriaOrientation, type Orientable } from \"./internal/aria-orientation\";\nimport { setAriaAttributeString } from \"./internal/aria-attribute\";\nimport { setFocus } from \"./internal/focus\";\n\nexport interface Tabs extends Labelable, List, Selectable, Orientable {\n  tabs: HTMLElement[]\n  panels: HTMLElement[]\n  auto: boolean\n}\n\nexport function createTabs(init?: Partial<Tabs>) {\n  // prefix for generating unique IDs\n  const prefixTabs = getPrefix('tabs')\n  const prefixTab = getPrefix('tab')\n  const prefixPanel = getPrefix('panel')\n\n  // internal state for component\n  let state: Tabs = {\n    tabs: [],\n    panels: [],\n    auto: true,\n    ...defaultList(),\n    ...defaultSelected,\n    ...defaultOrientation,\n    ...init,\n  }\n\n  // wrap with store for reactivity\n  const store = writable(state)\n\n  // update state and notify store of changes for reactivity\n  const set = (part: Partial<Tabs>) => store.set(state = { ...state, ...part })\n\n  // set focused (active) item only if changed\n  const focus = (active: number) => state.active !== active && set({ active })\n\n  // set focus (active) to first\n  const first = () => focus(firstActive(state))\n\n  // set focus (active) to previous\n  const previous = () => focus(previousActive(state))\n\n  // set focus (active) to next\n  const next = () => focus(nextActive(state))\n\n  // set focus (active) to last\n  const last = () => focus(lastActive(state))\n\n  const select = () => set(onSelect(state, state.tabs[state.selected]))\n\n  // clear focus\n  const none = () => focus(state.items.findIndex(item => item.value === state.selected))\n\n  // set the focus based on the HTMLElement passed which will be a tab element or null\n  const focusNode = getFocuser(() => state, focus)\n\n  function focusTab() {\n    const tab = state.tabs[state.items.findIndex(item => item.value === state.selected)]\n    tab.focus()\n  }\n\n  const remove = (node: HTMLElement) => set(removeItem(state, node))\n\n  // tablist\n  function list(node: HTMLElement) {\n    ensureID(node, prefixTabs)\n\n    const selectOnNavigate = (store: Readable<Tabs>): Behavior => node => derived(store, $store => $store.auto && $store.active !== state.items.findIndex(item => item.value === state.selected)).subscribe(select)\n\n    const destroy = applyBehaviors(node, [\n      setRole('tablist'),\n      reflectAriaLabel(store),\n      reflectAriaOrientation(store),\n      setTabIndex(-1),\n      onClick(activate('[role=\"tab\"]', focusNode, select)),\n      // onPointerMoveChild('[role=\"tab\"]', focusNode),\n      // onPointerOut(none),\n      onKeydown(\n        keySpaceEnter(select),\n        keyNavigation(first, previous, next, last, state.orientation),\n      ),\n      reflectAriaActivedescendent(store),\n      selectOnNavigate(store),\n    ])\n\n    return {\n      destroy,\n    }\n  }\n\n  function tab(node: HTMLElement, options?: ItemOptions) {\n    ensureID(node, prefixTab)\n    set({ tabs: [...state.tabs, node] })\n\n    const update = getUpdater(node, () => state, set)\n\n    update(options)\n\n    const value = state.items[state.items.length - 1].value\n    if (state.selected === value) {\n      set({ active: state.tabs.length - 1 })\n    }\n\n    const setTabIndex = setAriaAttributeString('tabindex')\n    const reflectAriaTabIndex = (store: Readable<Tabs>): Behavior => node => derived(store, $store => $store.selected === value ? '0' : '-1').subscribe(setTabIndex(node))\n    const reflectControls = (store: Readable<Tabs>): Behavior => node => derived(store, $store => $store.panels[$store.tabs.findIndex(tab => tab === node)]?.id).subscribe(setAriaControls(node))\n    const focusOnSelect = (store: Readable<Tabs>): Behavior => node => derived(store, $store => $store.selected === value).subscribe(setFocus(node))\n\n    const destroy = applyBehaviors(node, [\n      setType('button'),\n      setRole('tab'),\n      reflectAriaSelected(store, value),\n      reflectAriaTabIndex(store),\n      reflectControls(store),\n      focusOnSelect(store),\n    ])\n\n    return {\n      destroy,\n    }\n  }\n\n  function panel(node: HTMLElement, value: any) {\n    ensureID(node, prefixPanel)\n    set({ panels: [...state.panels, node] })\n\n    const setAriaLabelledBy = setAriaAttributeString('aria-labelledby')\n    const reflectAriaLabelledBy = (store: Readable<Tabs>): Behavior => node => derived(store, $store => $store.tabs[$store.panels.findIndex(panel => panel === node)].id).subscribe(setAriaLabelledBy(node))\n\n    const destroy = applyBehaviors(node, [\n      setTabIndex(0),\n      setRole('tabpanel'),\n      reflectAriaLabelledBy(store),\n      // reflectAriaDisabled(store),\n      onDestroy(remove),\n      // set to be visible / hidden based on selected state?\n    ])\n\n    return {\n      // update,\n      destroy,\n    }\n  }\n\n  // expose a subset of our state, derive the selected value\n  const { subscribe } = derived(store, $state => {\n    const { selected } = $state\n    return { selected, active: active($state) }\n  })\n\n  return {\n    subscribe,\n    list,\n    tab,\n    panel,\n    set,\n  }\n}\nfunction keyEndPageDown(first: () => false | void): import(\"./internal/key-handler\").KeyHandler {\n  throw new Error(\"Function not implemented.\");\n}\n\n","import type { Behavior } from \"./behavior\"\nimport { derived, type Readable } from 'svelte/store'\nimport { setAriaAttributeString } from \"./aria-attribute\"\n\nexport type Orientation = 'horizontal' | 'vertical'\n\nexport interface Orientable {\n  orientation: Orientation\n}\n\nexport const defaultOrientation: Orientable = {\n  orientation: 'horizontal'\n}\n\nexport const setAriaOrientation = setAriaAttributeString('aria-oriantation')\n\nexport const reflectAriaOrientation = (store: Readable<Orientable>): Behavior => node => derived(store, $store => $store.orientation).subscribe(setAriaOrientation(node))\n","import { derived, writable } from \"svelte/store\";\nimport { defaultCheckable, reflectAriaChecked, type Checkable } from \"./internal/aria-checked\";\nimport { reflectAriaLabel, type Labelable } from \"./internal/aria-label\";\nimport { applyBehaviors } from \"./internal/behavior\";\nimport { keySpaceEnter } from \"./internal/key-space-enter\";\nimport { ensureID } from \"./internal/new-id\";\nimport { onClick } from \"./internal/on-click\";\nimport { onKeydown } from \"./internal/on-keydown\";\nimport { setRole } from \"./internal/set-role\";\nimport { setTabIndex } from \"./internal/set-tab-index\";\nimport { setType } from \"./internal/set-type\";\nimport { getPrefix } from \"./internal/utils\";\nimport { defaultPressable, reflectAriaPressed, type Pressable } from \"./internal/aria-pressed\";\n\nexport interface Switch extends Labelable, Checkable, Pressable { }\n\nexport function createSwitch(init?: Partial<Switch>) {\n  // prefix for generating unique IDs\n  const prefix = getPrefix('switch')\n\n  let state: Switch = {\n    ...defaultCheckable,\n    ...defaultPressable,\n    ...init,\n  }\n\n  // wrap with store for reactivity\n  const store = writable(state)\n\n  // update state and notify store of changes for reactivity\n  const set = (part: Partial<Switch>) => store.set(state = { ...state, ...part })\n\n  const on = () => set({ checked: true })\n  const off = () => set({ checked: false })\n  const change = () => state.checked ? off() : on()\n\n  function button(node: HTMLElement) {\n    ensureID(node, prefix)\n\n    const destroy = applyBehaviors(node, [\n      setType('button'),\n      setRole('button'),\n      setTabIndex(0),\n      reflectAriaPressed(store),\n      reflectAriaLabel(store),\n      onClick(change),\n      onKeydown(\n        keySpaceEnter(change),\n      )\n    ])\n\n    return {\n      destroy,\n    }\n  }\n\n  function toggle(node: HTMLElement) {\n    ensureID(node, prefix)\n\n    const destroy = applyBehaviors(node, [\n      setType('button'),\n      setRole('switch'),\n      setTabIndex(0),\n      reflectAriaLabel(store),\n      reflectAriaChecked(store),\n      onClick(change),\n      onKeydown(\n        keySpaceEnter(change),\n      ),\n    ])\n\n    return {\n      destroy\n    }\n  }\n\n  // expose a subset of our state, derive the selected value\n  const { subscribe } = derived(store, $state => {\n    const { checked } = $state\n    return { checked, pressed: checked }\n  })\n\n  return {\n    subscribe,\n    button,\n    toggle,\n    set,\n  }\n}","import type { Behavior } from \"./behavior\"\nimport { derived, type Readable } from 'svelte/store'\nimport { setAriaAttributeBoolean } from \"./aria-attribute\"\n\nexport interface Checkable {\n  checked: boolean\n}\n\nexport const defaultCheckable: Checkable = {\n  checked: false\n}\n\nexport const setAriaChecked = setAriaAttributeBoolean('aria-checked')\n\nexport const reflectAriaChecked = (store: Readable<Checkable>): Behavior => node => derived(store, $store => $store.checked).subscribe(setAriaChecked(node))\n","import { derived, type Readable } from 'svelte/store'\nimport { setAriaAttributeBoolean } from './aria-attribute'\nimport type { Behavior } from './behavior'\n\nexport interface Pressable {\n  pressed: boolean\n}\n\nexport const defaultPressable: Pressable = {\n  pressed: false\n}\n\nexport const setAriaPressed = setAriaAttributeBoolean('aria-pressed')\n\nexport const reflectAriaPressed = (store: Readable<Pressable>): Behavior => node => derived(store, $store => $store.pressed).subscribe(setAriaPressed(node))\n"],"mappings":"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","names":["derived","writable","derived","setAriaAttributeString","name","node","id","setAriaAttributeBoolean","value","setAriaActivedescendent","setAriaAttributeString","reflectAriaActivedescendent","store","node","derived","$store","derived","setAriaControls","setAriaAttributeString","reflectAriaControls","store","node","derived","$store","derived","setAriaDisabled","setAriaAttributeBoolean","reflectAriaDisabled","store","node","derived","$store","item","derived","derived","Space","Enter","Escape","ArrowLeft","ArrowUp","ArrowRight","ArrowDown","Home","End","PageUp","PageDown","Tab","setFocus","node","focus","focusableSelector","onKeyDown","event","Tab","container","element","focusable","first","last","trapFocusOnOpen","store","derived","$store","expanded","defaultExpanded","setAriaExpanded","setAriaAttributeBoolean","reflectAriaExpanded","store","node","derived","$store","focusOnExpanded","setFocus","focusOnClose","derived","setAriaLabel","setAriaAttributeString","reflectAriaLabel","store","node","derived","$store","derived","defaultSelected","setAriaSelected","setAriaAttributeBoolean","reflectAriaSelected","store","value","node","derived","$store","applyBehaviors","node","behaviors","unsubscribes","behavior","unsubscribe","blockDefaultKeyAction","event","allowDefaultKeyAction","_event","keyHandler","matches","action","fns","fn","keyEscape","keyHandler","Escape","keyTab","keyHandler","Tab","keyTabAllow","allowDefaultKeyAction","defaultList","onDestroy","fn","node","removeItem","state","item","active","activate","selector","focus","actions","event","el","action","onSelect","selected","getItemValues","options","text","firstActive","previousActive","x","nextActive","lastActive","findLastIndex","array","predicate","l","getUpdater","getState","setState","values","getFocuser","getSearch","prefixOnly","query","searchable","re","found","index","id","newID","ensureID","node","prefix","listener","node","type","handler","capture","onClick","fn","node","listener","onClickOutside","fn","preventPropagation","node","initial","handler","event","setInitial","listeners","listener","onInput","fn","node","listener","event","el","onKeydown","handlers","handler","event","node","onPointerOut","fn","node","handler","onPointerMoveChild","selector","event","el","noop","setHasPopup","node","noop","setRole","role","node","noop","setTabIndex","index","node","noop","setType","type","node","noop","derived","setInputValue","node","value","reflectSelectedValueOnClose","store","selector","$store","tick","getPrefix","name","keyEnter","keyHandler","Enter","keyHomePageUp","keyHandler","Home","PageUp","keyEndPageDn","End","PageDown","keyLeft","keyHandler","ArrowLeft","keyRight","ArrowRight","keyUp","keyHandler","ArrowUp","keyDown","ArrowDown","keyNavigation","first","previous","next","last","orientation","handleFirst","keyHomePageUp","handlePrevious","keyUp","keyLeft","handleNext","keyDown","keyRight","handleLast","keyEndPageDn","event","createCombobox","init","prefix","getPrefix","state","defaultList","defaultExpanded","defaultSelected","store","writable","set","part","open","x","close","toggle","focus","active","expand","first","firstActive","previous","previousActive","next","nextActive","last","lastActive","none","reset","filter","value","current","tick","selectedIndex","item","currentIndex","focusNode","getFocuser","remove","node","removeItem","select","onSelect","input","ensureID","applyBehaviors","setType","setRole","setTabIndex","reflectAriaLabel","reflectAriaExpanded","reflectAriaControls","reflectSelectedValueOnClose","onKeydown","keyEnter","keyEscape","keyNavigation","keyTabAllow","onInput","focusOnClose","button","setHasPopup","onClick","setFocusToInput","items","onClickOutside","target","activate","onPointerMoveChild","onPointerOut","reflectAriaActivedescendent","options","update","getUpdater","destroy","reflectAriaDisabled","onDestroy","subscribe","derived","$state","expanded","selected","derived","writable","derived","setAriaModal","setAriaAttributeBoolean","reflectAriaModal","store","node","derived","$store","createDialog","init","prefix","getPrefix","state","defaultExpanded","store","writable","set","part","open","close","modal","node","ensureID","applyBehaviors","setRole","reflectAriaModal","reflectAriaLabel","trapFocusOnOpen","onClickOutside","onKeydown","keyEscape","subscribe","derived","$state","expanded","derived","writable","keySpaceEnter","keyHandler","Space","Enter","createDisclosure","init","prefix","getPrefix","state","defaultExpanded","store","writable","set","part","open","close","toggle","button","node","ensureID","applyBehaviors","setType","setRole","setHasPopup","setTabIndex","reflectAriaExpanded","reflectAriaLabel","reflectAriaControls","onClick","onKeydown","keyEscape","keySpaceEnter","focusOnClose","panel","focusOnExpanded","subscribe","derived","$state","expanded","derived","writable","isCharacter","value","keyCharacter","fn","timeout","query","event","key","isCharacter","createListbox","init","prefix","getPrefix","state","defaultList","defaultExpanded","defaultSelected","store","writable","set","part","open","x","close","toggle","focus","active","first","firstActive","previous","previousActive","next","nextActive","last","lastActive","none","search","getSearch","focusNode","getFocuser","remove","node","removeItem","select","onSelect","button","ensureID","applyBehaviors","setType","setRole","setHasPopup","setTabIndex","reflectAriaLabel","reflectAriaExpanded","reflectAriaControls","onClick","onKeydown","keySpaceEnter","keyUp","keyDown","focusOnClose","items","onClickOutside","target","activate","onPointerMoveChild","onPointerOut","keyEscape","keyNavigation","keyTab","noop","keyCharacter","focusOnExpanded","reflectAriaActivedescendent","item","options","update","getUpdater","destroy","reflectAriaDisabled","onDestroy","subscribe","derived","$state","expanded","selected","derived","writable","createMenu","init","prefix","getPrefix","state","defaultList","defaultExpanded","defaultSelected","store","writable","set","part","open","close","toggle","focus","active","expand","first","firstActive","previous","previousActive","next","nextActive","last","lastActive","select","onSelect","none","search","getSearch","focusNode","getFocuser","remove","node","removeItem","button","ensureID","applyBehaviors","setType","setRole","setHasPopup","setTabIndex","reflectAriaLabel","reflectAriaExpanded","reflectAriaControls","onClick","onKeydown","keySpaceEnter","keyUp","keyDown","focusOnClose","items","onClickOutside","target","activate","onPointerMoveChild","onPointerOut","keyEscape","keyNavigation","keyTab","noop","keyCharacter","focusOnExpanded","reflectAriaActivedescendent","item","options","update","getUpdater","destroy","reflectAriaDisabled","onDestroy","subscribe","derived","$state","expanded","derived","writable","createPopover","init","prefix","getPrefix","state","defaultExpanded","store","writable","set","part","open","close","toggle","button","node","ensureID","applyBehaviors","setType","setRole","setHasPopup","setTabIndex","reflectAriaExpanded","reflectAriaLabel","reflectAriaControls","onClick","onKeydown","keyEscape","keySpaceEnter","focusOnClose","panel","onClickOutside","target","focusOnExpanded","subscribe","derived","$state","expanded","derived","writable","derived","defaultOrientation","setAriaOrientation","setAriaAttributeString","reflectAriaOrientation","store","node","derived","$store","createTabs","init","prefixTabs","getPrefix","prefixTab","prefixPanel","state","defaultList","defaultSelected","defaultOrientation","store","writable","set","part","focus","active","first","firstActive","previous","previousActive","next","nextActive","last","lastActive","select","onSelect","none","item","focusNode","getFocuser","focusTab","remove","node","removeItem","list","ensureID","selectOnNavigate","derived","$store","applyBehaviors","setRole","reflectAriaLabel","reflectAriaOrientation","setTabIndex","onClick","activate","onKeydown","keySpaceEnter","keyNavigation","reflectAriaActivedescendent","tab","options","getUpdater","value","setAriaAttributeString","reflectAriaTabIndex","reflectControls","setAriaControls","focusOnSelect","setFocus","setType","reflectAriaSelected","panel","setAriaLabelledBy","reflectAriaLabelledBy","onDestroy","subscribe","$state","selected","derived","writable","derived","defaultCheckable","setAriaChecked","setAriaAttributeBoolean","reflectAriaChecked","store","node","derived","$store","derived","defaultPressable","setAriaPressed","setAriaAttributeBoolean","reflectAriaPressed","store","node","derived","$store","createSwitch","init","prefix","getPrefix","state","defaultCheckable","defaultPressable","store","writable","set","part","on","off","change","button","node","ensureID","applyBehaviors","setType","setRole","setTabIndex","reflectAriaPressed","reflectAriaLabel","onClick","onKeydown","keySpaceEnter","toggle","reflectAriaChecked","subscribe","derived","$state","checked"]}
name: Test Docker Image Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    # matrix strategy for testing multiple services
    strategy:
      matrix:
        service: [feed, queue, buffer, purchase, payment]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16.x'

    - name: Install and build frontends
      run: |
        for service in feed queue buffer purchase payment; do
          cd $service-service/$service-frontend
          npm ci && npm run build
          cd ../../
        done
      
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: maven-${{ hashFiles(format('{0}-service/{0}-backend/pom.xml', matrix.service)) }}
        restore-keys: |
          maven-
      env:
        MATRIX_SERVICE: ${{ toJson(matrix.service) }}

    - name: Set .env file from Secrets
      run: |
        echo "ECR_REPO_URL=${{ secrets.ECR_REPO_URL }}" >> ./feed-service/feed-backend/.env
        echo "RDS_HOST_URL=${{ secrets.RDS_HOST_URL }}" >> ./feed-service/feed-backend/.env
        echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> ./feed-service/feed-backend/.env
        echo "MYSQL_DATABASE=${{ env.MYSQL_DATABASE }}" >> ./feed-service/feed-backend/.env
        echo "SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> ./feed-service/feed-backend/.env
        echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> ./feed-service/feed-backend/.env
        echo "AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}" >> ./feed-service/feed-backend/.env
        echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> ./feed-service/feed-backend/.env
        echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> ./feed-service/feed-backend/.env
        echo "AWS_CERTIFICATE_ARN=${{ secrets.AWS_CERTIFICATE_ARN }}" >> ./feed-service/feed-backend/.env
        echo "user_pool_client_clientid=${{ secrets.USER_POOL_CLIENTID }}" >> ./feed-service/feed-backend/.env
        echo "user_pool_client_secret=${{ secrets.USER_POOL_CLIENT_SECRET }}" >> ./feed-service/feed-backend/.env
        echo "ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}" >> ./buffer-service/buffer-backend/.env
        echo "STRIPE_KEY_PUBLIC=${{ secrets.STRIPE_KEY_PUBLIC }}" >> ./payment-service/payment-backend/.env
        echo "STRIPE_KEY_SECRET=${{ secrets.STRIPE_KEY_SECRET }}" >> ./payment-service/payment-backend/.env
        echo "MYSQL_PURCHASE_DATABASE=${{ env.MYSQL_PURCHASE_DATABASE }}" >> ./purchase-service/purchase-backend/.env
        echo "RDS_PURCHASE_HOST_URL=${{ secrets.RDS_PURCHASE_HOST_URL }}" >> ./purchase-service/purchase-backend/.env
        echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> ./purchase-service/purchase-backend/.env
        echo "SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> ./purchase-service/purchase-backend/.env
        echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> ./purchase-service/purchase-backend/.env

    - name: Docker Compose Build
      run: docker-compose build
    
    - name: Show Docker Logs
      run: docker-compose logs
    
    - name: Check .env files
      run: |
        for service in feed buffer payment; do
          echo "Checking .env for $service service:"
          cat ./$service-service/$service-backend/.env || echo "No .env file found for $service"
        done

    - name: Stop conflicting Mono service on port 8084
      run: |
        sudo kill $(sudo lsof -t -i :8084) || true
    
    - name: Docker Compose Up (Foreground)
      run: docker-compose up --force-recreate -d

    - name: Wait for services to start
      run: sleep 15

    - name: Debugging (show entire docker-compose)
      run: |
        docker-compose ps

    - name: Check if the application containers are running
      run: |
        if ! docker-compose ps | grep -E "feed_1|queue_1|buffer_1|purchase_1|payment_1"; then
          echo "One or more containers are not running."
          exit 1
        fi
      
    - name: Cleanup
      if: always()
      run: |
        docker-compose down
name: Test Docker Image Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Cache npm dependencies
      uses: actions/cache@v3
      with:
        path: demoapp/frontend/node_modules
        key: npm-${{ hashFiles('demoapp/frontend/package-lock.json') }}
        restore-keys: |
          npm-

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20.6.1'

    - name: Install frontend dependencies for feed
      run: |
        cd distributed/feed/frontend
        npm ci

    - name: Build the frontend into the backend for feed
      run: |
        cd distributed/feed/frontend
        npm run build

    - name: Install frontend dependencies for queue
      run: |
        cd distributed/queue/frontend
        npm ci

    - name: Build the frontend into the backend for queue
      run: |
        cd distributed/queue/frontend
        npm run build

    - name: Install frontend dependencies for buffer
      run: |
        cd distributed/buffer/frontend
        npm ci

    - name: Build the frontend into the backend for buffer
      run: |
        cd distributed/buffer/frontend
        npm run build

    - name: Cache Maven dependencies (feed)
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: maven-${{ hashFiles('distributed/feed/backend/pom.xml') }}
        restore-keys: |
          maven-

    - name: Cache Maven dependencies (queue)
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: maven-${{ hashFiles('distributed/queue/backend/pom.xml') }}
        restore-keys: |
          maven-

    - name: Cache Maven dependencies (buffer)
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: maven-${{ hashFiles('distributed/queue/backend/pom.xml') }}
        restore-keys: |
          maven-

    - name: Set Environment Variables from Secrets
      run: |
        echo "ECR_REPO_URL=${{ secrets.ECR_REPO_URL }}" >> $GITHUB_ENV
        echo "RDS_HOST_URL=${{ secrets.RDS_HOST_URL }}" >> $GITHUB_ENV
        echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> $GITHUB_ENV
        echo "MYSQL_DATABASE=${{ env.MYSQL_DATABASE }}" >> $GITHUB_ENV
        echo "SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> $GITHUB_ENV
        echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> $GITHUB_ENV
        echo "AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}" >> $GITHUB_ENV
        echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> $GITHUB_ENV
        echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> $GITHUB_ENV
        echo "AWS_CERTIFICATE_ARN=${{ secrets.AWS_CERTIFICATE_ARN }}" >> $GITHUB_ENV
        echo "user_pool_client_clientid=${{ secrets.USER_POOL_CLIENTID }}" >> $GITHUB_ENV
        echo "user_pool_client_secret=${{ secrets.USER_POOL_CLIENT_SECRET }}" >> $GITHUB_ENV

    - name: Build and run all the services
      run: |
        cd distributed
        docker-compose up --build -d

    - name: Check if the application is running
      run: |
        cd distributed
        docker-compose ps | grep "homeapp" # check if app is running

    - name: Cleanup
      if: always()
      run: |
        cd distributed
        docker-compose down
